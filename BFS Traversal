void bfs(int start, vector<vector<int>>& adj, vector<bool>& visited) {
    queue<int> q;
    q.push(start);
    visited[start] = true;

    while (!q.empty()) {
        int node = q.front();
        q.pop();
        cout << node << " ";

        for (int neighbor : adj[node]) {
            if (!visited[neighbor]) {
                q.push(neighbor);
                visited[neighbor] = true;
            }
        }
    }
}

/*
Example:
     0
    / \
   1   2
  /     \
 3       4

ðŸ§  Step-by-step BFS Traversal:
Start at node 0 â†’ visit 0, mark as visited
Queue: [0] â†’ Pop 0 â†’ Visit 1, 2

Visit node 1
Queue: [1, 2] â†’ Pop 1 â†’ Visit 3

Visit node 2
Queue: [2, 3] â†’ Pop 2 â†’ Visit 4

Visit node 3
Queue: [3, 4] â†’ Pop 3 â†’ No new neighbors

Visit node 4
Queue: [4] â†’ Pop 4 â†’ No new neighbors


*/
