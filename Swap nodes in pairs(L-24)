/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* swapPairs(ListNode* head) {
        // Base case: if list is empty OR has only one node
        if (!head || !head->next)
            return head;
        
        // Identify the next node (second node in pair)
        ListNode* nextNode = head->next;
        
        // Recursively call swapPairs on the remaining list after this pair
        head->next = swapPairs(head->next->next);
        
        // Swap: second node points to first
        nextNode->next = head;
        
        // Return new head of this pair (which is the second node)
        return nextNode;
    }
};
