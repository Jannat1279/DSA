class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        unordered_map<int,int> mpp;
        for(int i=0;i<nums.size();i++){
            int complement=target-nums[i];

            // Checks if the complement exists in the map
            if(mpp.find(complement)!=mpp.end()){
                return{mpp[complement],i};
            }
            mpp[nums[i]]=i;
        }
        return {};
    }
};
// TC - O(n) and SC - O(1)
/*
Example:
nums = [3, 2, 4]
target = 6

i = 0, nums[i] = 3
complement = 6 - 3 = 3
Map is empty → complement not found
Store: numMap[3] = 0

i = 1, nums[i] = 2
complement = 6 - 2 = 4
4 not in map → store numMap[2] = 1

i = 2, nums[i] = 4
complement = 6 - 4 = 2
2 is in map at index 1O
✅ Found: nums[1] + nums[2] = 2 + 4 = 6
So, return {1, 2}


// Theres is a very traditional method for this question which takes 2 loops, there TC - O(n^2)
*/
