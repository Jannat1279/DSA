class Solution {
	public:
	// Function to return list containing vertices in Topological order. 
	vector<int> topoSort(int N, vector<int> adj[])  {
	    queue<int> que;                // queue to store vertices with indegree 0
	    vector<int> indegree(N, 0);    // indegree array for all vertices
	    
	    // 1. Compute indegree of every vertex
	    // indegree[v] = number of incoming edges to vertex v
	    for (int u = 0; u < N; u++) {
	        for (int &v : adj[u]) {
	            indegree[v]++;
	        }
	    }
	    
	    // 2. Push all vertices with indegree = 0 into queue
	    // These nodes can appear first in topological order
	    for (int i = 0; i < N; i++) {
	        if (indegree[i] == 0) {
	            que.push(i);
	        }
	    }
	    
	    // 3. Process vertices using BFS
	    vector<int> result;
	    while (!que.empty()) {
	        int u = que.front();
	        que.pop();
	        
	        result.push_back(u);   // add node to result (topological order)
	        
	        // Reduce indegree of all neighbors
	        for (int &v : adj[u]) {
	            indegree[v]--;
	            
	            // If indegree becomes 0, push into queue
	            if (indegree[v] == 0) {
	                que.push(v);
	            }
	        }
	    }
	    
	    return result; // final topological order
	}
};
