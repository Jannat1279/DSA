#include <bits/stdc++.h>
using namespace std;

int maxLen(vector<int>& arr) {
    unordered_map<int, int> mp; // prefixSum -> firstIndex
    int prefixSum = 0, maxLength = 0;

    for (int i = 0; i < arr.size(); i++) {
        prefixSum += arr[i];

        // Case 1: Entire subarray [0..i] has sum 0
        if (prefixSum == 0) {
            maxLength = i + 1;
        }

        // Case 2: Prefix sum seen before
        if (mp.find(prefixSum) != mp.end()) {
            maxLength = max(maxLength, i - mp[prefixSum]);
        } else {
            // Store first occurrence
            mp[prefixSum] = i;
        }
    }
    return maxLength;
}

int main() {
    vector<int> arr = {15, -2, 2, -8, 1, 7, 10, 23};
    cout << "Largest Subarray with 0 Sum Length: " << maxLen(arr) << endl;
    return 0;
}
